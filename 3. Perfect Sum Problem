class Solution{

	public:
	int mod = (int)(1e9 + 7);
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        int dp[n+1][sum+1];
        
        for(int i=0;i<n+1;i++)
	{
	    for(int j=0;j<sum+1;j++)
	    {
	        if(j==0)
	        dp[i][j]=1;
	        
	        if((i==0)&&(j!=0))
	        dp[i][j]=0;
	    }
	}
	
        for(int i=1;i<n+1;i++)
	    {
	        for(int j=0;j<sum+1;j++)  //But here we need to start with j=0, to include +1 extra count if arr[n-1] = 0.
	        {
                      if(arr[i-1]>j) 
                         dp[i][j] = (dp[i-1][j])%mod;
                      
                      else
                      {
                         dp[i][j] = ((dp[i-1][j-arr[i-1]])%mod + (dp[i-1][j])%mod)%mod;
                      }
	        }
	    }
	
	return dp[n][sum];
	}








Starting the second loop with j=0, instead of j=1, will do the trick.
As,
If(arr[i-1] > 0) => dp[i][0] = dp[i-1][0]
else If(arr[i-1] <= 0) => dp[i][0] = dp[i-1][0] + dp[i-1][0]; and this extra term will lead to extra +1. And this extra +1 will exist whenever arr[i-1] == 0. Thus increasing our answers by 
no. of zeroes whenever required.
