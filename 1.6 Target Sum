class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sumArray=0;
        target=abs(target);    //absolute value of target
        int cnt=0;            //counting number of zeroes in nums
        
        for(int i=0;i<nums.size();i++)
        {
            sumArray=sumArray+nums[i];
            
            if(nums[i]==0)
                cnt++;
        }
        
        if(sumArray<target) return 0;
        if((sumArray+target)%2!=0) return 0;
        
        
        int sum=(sumArray+target)/2;
        
        int n=nums.size();
        int dp[n+1][sum+1];
        
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(j==0)
                dp[i][j]=1;
                
                if(i==0&& j!=0)
                    dp[i][j]=0;
            }
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                
                if(nums[i-1]>j)
                    dp[i][j]=dp[i-1][j];
                
                else if(nums[i-1]==0)
                    dp[i][j]=dp[i-1][j];
                
                else
                    dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j];
                
            }
        }
        
        return pow(2,cnt)*dp[n][sum];
    }
};
